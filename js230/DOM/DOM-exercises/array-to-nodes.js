/*
Input: nested array of subarrays of the format: [nodeName, [children]]
Output: the DOM generated by that array
Rules:
  -if a node doesn't have children, the subarray of its array is empty
  -the first element is always the `body`
  -the elements inside the children array of an element, must be
   nested inside that element in the DOM
Data structure:
Algorithm:
  -generate a function that takes an array as an argument
    where the first element is a tagName and the second is an array
    of its children
    -create an element from the tagName at index `0` and save it to `parent` variable
    -iterate over the children array and for each child element array
      -append the return value of the current function with that array as an argument
        to the `parent` element
  -return `parent` 
*/

function arrayToNodes(nodes) {
  let parent = document.createElement(nodes[0]);

  nodes[1].forEach((childArr) => {
    parent.append(arrayToNodes(childArr));
  });
  
  return parent;
}

// Nested array of nodes
// const nodes = ["BODY", [["HEADER",[]], ["MAIN",[]], ["FOOTER",[]]]];

/*
<body>
  <header></header>
  <main></main>
  <footer></footer>
</body>
*/

// Nested array of nodes
const nodes = ["BODY",[["DIV",[["DIV",[]],["DIV",[["DIV",[]]]]]],["DIV",[]],["DIV",[["DIV",[]],["DIV",[]],["DIV",[]]]]]];
console.log(arrayToNodes(nodes));
/* 
<body>
  <div>
    <div></div>
    <div>
      <div></div>
    </div>
  </div>
  <div></div>
  <div>
    <div></div>
    <div></div>
    <div></div>
  </div>
</body>
*/